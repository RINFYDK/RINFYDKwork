From e207f460b728230d162580ef312f9adbcbb39ff9 Mon Sep 17 00:00:00 2001
From: Simon Chung <simon.c.chung@accenture.com>
Date: Fri, 21 Oct 2016 11:44:52 +0100
Subject: [PATCH] ccsp-gw-provapp-rpi

---
 source/Makefile.am                   |   5 +-
 source/gw_prov_sm.c                  | 270 ++++++++++++++++++++++++++++++++---
 source/include/gw_prov_abstraction.h |  39 +++++
 3 files changed, 290 insertions(+), 24 deletions(-)

diff --git a/source/Makefile.am b/source/Makefile.am
index 16d4df3..a255de7 100644
--- a/source/Makefile.am
+++ b/source/Makefile.am
@@ -20,8 +20,7 @@ AM_CFLAGS = -D_ANSC_LINUX
 AM_CFLAGS += -D_ANSC_USER
 AM_CFLAGS += -D_ANSC_LITTLE_ENDIAN_
 AM_CFLAGS += -DCONFIG_PRIMARY_NET_BRIDGE_MODE
-AM_LDFLAGS = -lgwprovappabs
-AM_LDFLAGS += -lsysevent
+AM_LDFLAGS = -lsysevent
 AM_LDFLAGS += -lsyscfg
 AM_LDFLAGS += -lulog
 
@@ -31,4 +30,4 @@ hardware_platform = i686-linux-gnu
 bin_PROGRAMS = gw_prov_utopia
 gw_prov_utopia_CPPFLAGS = -I/var/tmp/pc-rdkb/include $(CPPFLAGS) -I$(srcdir)/include -I${PKG_CONFIG_SYSROOT_DIR}/$(includedir)/ruli/
 gw_prov_utopia_SOURCES = gw_prov_sm.c
-gw_prov_utopia_LDFLAGS =  -lgwprovappabs -lsysevent -lsyscfg -lulog
+gw_prov_utopia_LDFLAGS = -lsysevent -lsyscfg -lulog
diff --git a/source/gw_prov_sm.c b/source/gw_prov_sm.c
index bf11e6f..57068ff 100644
--- a/source/gw_prov_sm.c
+++ b/source/gw_prov_sm.c
@@ -54,16 +54,20 @@
 #include <sys/ioctl.h>
 #include <sys/socket.h>
 #include <sys/stat.h>
-#include <sys/types.h>
+
+#if !defined(_PLATFORM_RASPBERRYPI_)
+    #include <sys/types.h>
+    #include <ruli.h>
+    #include "docsis_esafe_db.h"
+#endif
+
 #include <unistd.h>
-#include <ruli.h>
 #include <sysevent/sysevent.h>
 #include <syscfg/syscfg.h>
 #include <pthread.h>
 #include "gw_prov_abstraction.h"
 #include "Tr69_Tlv.h"
 #include <autoconf.h>
-#include "docsis_esafe_db.h"
 #include <time.h>
 
 /**************************************************************************/
@@ -167,6 +171,7 @@ static token_t sysevent_token;
 static int sysevent_fd_gs;
 static token_t sysevent_token_gs;
 static pthread_t sysevent_tid;
+static pthread_t linkstate_tid;
 static int phylink_wan_state = 0;
 static int once = 0;
 static int bridge_mode = BRMODE_ROUTER;
@@ -198,7 +203,7 @@ static int getSyseventBridgeMode(int erouterMode, int bridgeMode) {
 
 }
 
-
+#if !defined(_PLATFORM_RASPBERRYPI_)
 /**************************************************************************/
 /*! \fn STATUS GW_TlvParserInit(void)
  **************************************************************************
@@ -623,6 +628,8 @@ label_nok:
     return STATUS_NOK;
 #endif 
 }
+#endif
+
 static TlvParseCallbackStatusExtIf_e GW_setTopologyMode(Uint8 type, Uint16 length, const Uint8* value)
 {
     Uint8 tpMode = *value;
@@ -685,6 +692,7 @@ static int GWP_SysCfgSetInt(const char *name, int int_value)
    return syscfg_set(NULL, name, value);
 }
 
+#if !defined(_PLATFORM_RASPBERRYPI_)
 /**************************************************************************/
 /*! \fn static STATUS GWP_UpdateEsafeAdminMode()
  **************************************************************************
@@ -759,7 +767,7 @@ static void GWP_DocsisInited(void)
         LAN_start();
 
 }
-
+#endif
 
 /**************************************************************************/
 /*! \fn void GWP_EnableERouter(void)
@@ -769,13 +777,14 @@ static void GWP_DocsisInited(void)
 **************************************************************************/
 static void GWP_EnableERouter(void)
 {
+#if !defined(_PLATFORM_RASPBERRYPI_)
     /* Update ESAFE state */
     GWP_UpdateEsafeAdminMode(eRouterMode);
 
     eSafeDevice_SetErouterOperationMode(DOCESAFE_EROUTER_OPER_NOIPV4_NOIPV6_extIf);
     
     eSafeDevice_SetProvisioningStatusProgress(ESAFE_PROV_STATE_IN_PROGRESS_extIf);
-	
+#endif
     //bridge_mode = 0;
     //system("sysevent set bridge_mode 0");
     //system("sysevent set forwarding-restart");
@@ -814,6 +823,7 @@ static void GWP_EnterRouterMode(void)
 **************************************************************************/
 static void GWP_DisableERouter(void)
 {
+#if !defined(_PLATFORM_RASPBERRYPI_)
     /* Update ESAFE state */
     GWP_UpdateEsafeAdminMode(eRouterMode);
 
@@ -821,7 +831,7 @@ static void GWP_DisableERouter(void)
     
     /* Reset Switch, to remove all VLANs */ 
     eSafeDevice_SetProvisioningStatusProgress(ESAFE_PROV_STATE_NOT_INITIATED_extIf);
-   	
+#endif
 //    char sysevent_cmd[80];
 //     snprintf(sysevent_cmd, sizeof(sysevent_cmd), "sysevent set bridge_mode %d", bridge_mode);
 //     system(sysevent_cmd);
@@ -919,8 +929,10 @@ static void GWP_UpdateERouterMode(void)
             }
             else  // remain enabled, switch mode
             {
+#if !defined(_PLATFORM_RASPBERRYPI_)
                 /* Update ESAFE state */
                 GWP_UpdateEsafeAdminMode(eRouterMode);
+#endif
                 if(!once)
                     check_lan_wan_ready();
                 system("sysevent set erouter_mode-updated");
@@ -993,6 +1005,7 @@ static void GWP_ProcessUtopiaRestart(void)
 //     }
 }
 
+#if !defined(_PLATFORM_RASPBERRYPI_)
 /**************************************************************************/
 /*! \fn int GWP_ProcessIpv4Down();
  **************************************************************************
@@ -1124,6 +1137,7 @@ static int GWP_ProcessIpv6Up(void)
 
     return 0;
 }
+#endif
 
 static void check_lan_wan_ready()
 {
@@ -1285,22 +1299,30 @@ static void *GWP_sysevent_threadfunc(void *data)
             {
                 if (strcmp(val, "up")==0)
                 {
+#if !defined(_PLATFORM_RASPBERRYPI_)
                     GWP_ProcessIpv4Up();
+#endif
                 }
                 else if (strcmp(val, "down")==0)
                 {
+#if !defined(_PLATFORM_RASPBERRYPI_)
                     GWP_ProcessIpv4Down();
+#endif
                 }
             }
             else if (strcmp(name, "ipv6-status") == 0)
             {
                 if (strcmp(val, "up")==0)
                 {
+#if !defined(_PLATFORM_RASPBERRYPI_)
                     GWP_ProcessIpv6Up();
+#endif
                 }
                 else if (strcmp(val, "down")==0)
                 {
+#if !defined(_PLATFORM_RASPBERRYPI_)
                     GWP_ProcessIpv6Down();
+#endif
                 }
             }
             else if (strcmp(name, "system-restart") == 0)
@@ -1335,7 +1357,9 @@ static void *GWP_sysevent_threadfunc(void *data)
             {
                 if (strcmp(val, "started") == 0) {
                     if (!webui_started) { 
+#if !defined(_PLATFORM_RASPBERRYPI_)
                         startWebUIProcess();
+#endif
                         webui_started = 1 ;
 #ifdef CONFIG_CISCO_HOME_SECURITY
                         //Piggy back off the webui start event to signal XHS startup
@@ -1368,8 +1392,9 @@ static void *GWP_sysevent_threadfunc(void *data)
                 Uint8 v6addr[ NETUTILS_IPv6_GLOBAL_ADDR_LEN / sizeof(Uint8) ];
                 Uint8 soladdr[ NETUTILS_IPv6_GLOBAL_ADDR_LEN / sizeof(Uint8) ];
                 inet_pton(AF_INET6, val, v6addr);
-                
+#if !defined(_PLATFORM_RASPBERRYPI_)
                 getMultiCastGroupAddress(v6addr,soladdr);
+#endif
                 inet_ntop(AF_INET6, soladdr, val, sizeof(val));
                 
                 
@@ -1442,26 +1467,165 @@ static int GWP_act_DocsisLinkDown_callback_2()
 
 static int GWP_act_DocsisLinkUp_callback()
 {
+#if defined(_PLATFORM_RASPBERRYPI_)
     phylink_wan_state = 1;
     system("sysevent set phylink_wan_state up");
     printf("\n**************************\n");
     printf("\nsysevent set phylink_wan_state up\n");
     printf("\n**************************\n\n");
 
-    
+     char *temp;
+     char command[50];
+     char wanPhyName[20];
+     char out_value[20];
+     int outbufsz = sizeof(out_value);
+
+    char* buff = NULL;
+    buff = malloc(sizeof(char)*50);
+    if(buff == NULL)
+    {
+        return -1;
+    }
+
+    if (!syscfg_get(NULL, "wan_physical_ifname", out_value, outbufsz))
+    {
+        strcpy(wanPhyName, out_value);
+        printf("wanPhyName = %s\n", wanPhyName);
+    }
+    else
+    {
+        if(buff != NULL)
+            free(buff);
+        return -1;
+    }
+    sprintf(command, "ifconfig %s | grep \"inet addr\" | cut -d':' -f2 | awk '{print$1}'", wanPhyName);
+
     if (eRouterMode != DOCESAFE_ENABLE_DISABLE_extIf /*&& bridge_mode == 0*/) // mipieper - pseduo bridge support
     {
         printf("Starting wan service\n");
         system("sysevent set wan-start");
-    #ifdef CISCO_CONFIG_DHCPV6_PREFIX_DELEGATION
-        system("sysevent set dhcpv6_client-start");
-    #endif
+        sleep(50);
+        system("sysevent set current_ipv4_link_state up");
+        system("sysevent set ipv4_wan_ipaddr `ifconfig erouter0 | grep \"inet addr\" | cut -d':' -f2 | awk '{print$1}'`");
+        system("sysevent set ipv4_wan_subnet `ifconfig erouter0 | grep \"inet addr\" | cut -d':' -f4 | awk '{print$1}'`");
+        system("sysevent set wan_service-status started");
+        system("sysevent set bridge_mode `syscfg get bridge_mode`");
     }
+    if(buff != NULL)
+        free(buff);
+#else
+    phylink_wan_state = 1;
+    system("sysevent set phylink_wan_state up");
+    printf("\n**************************\n");
+    printf("\nsysevent set phylink_wan_state up\n");
+    printf("\n**************************\n\n");
+
 
+    if (eRouterMode != DOCESAFE_ENABLE_DISABLE_extIf /*&& bridge_mode == 0*/) // mipieper - pseduo bridge support
+    {
+        printf("Starting wan service\n");
+        system("sysevent set wan-start");
+    }
+#endif
     return 0;
 }
 
+#if defined(_PLATFORM_RASPBERRYPI_)
+/**************************************************************************/
+/*! \fn void *GWP_linkstate_threadfunc(void *)
+ **************************************************************************
+ *  \brief Thread function to check the link state
+ *  \return
+ **************************************************************************/
+static void *GWP_linkstate_threadfunc(void *data)
+{
+
+    char *temp;
+    char command[50] = {0};
+    char wanPhyName[20] = {0};
+    char out_value[20] = {0};
+    int outbufsz = sizeof(out_value);
+
+    char* buff = NULL;
+    buff = malloc(sizeof(char)*50);
+    if(buff == NULL)
+    {
+        return -1;
+    }
+    char previousLinkStatus[10] = "down";
+    if (!syscfg_get(NULL, "wan_physical_ifname", out_value, outbufsz))
+    {
+        strcpy(wanPhyName, out_value);
+        printf("wanPhyName = %s\n", wanPhyName);
+    }
+    else
+    {
+        if(buff != NULL)
+            free(buff);
+        return -1;
+    }
+    sprintf(command, "cat /sys/class/net/%s/operstate", wanPhyName);
+
+    while(1)
+    {
+        FILE *fp;
+        memset(buff,0,sizeof(buff));
+
+        /* Open the command for reading. */
+        fp = popen(command, "r");
+        if (fp == NULL)
+        {
+            printf("<%s>:<%d> Error popen\n", __FUNCTION__, __LINE__);
+            continue;
+        }
 
+        /* Read the output a line at a time - output it. */
+        while (fgets(buff, 50, fp) != NULL)
+        {
+            printf("Ethernet status :%s", buff);
+            temp = strchr(buff, '\n');
+            if(temp)
+                *temp = '\0';
+        }
+
+        /* close */
+        pclose(fp);
+        if(!strcmp(buff, (const char *)previousLinkStatus))
+        {
+            printf("Link status not changed\n");
+        }
+        else
+        {
+            if(!strcmp(buff, "up"))
+            {
+                printf("Ethernet status :%s\n", buff);
+                GWP_act_DocsisLinkUp_callback();
+            }
+            else if(!strcmp(buff, "down"))
+            {
+                printf("Ethernet status :%s\n", buff);
+                GWP_act_DocsisLinkDown_callback_1();
+                GWP_act_DocsisLinkDown_callback_2();
+            }
+            else
+            {
+                sleep(5);
+                continue;
+            }
+            memset(previousLinkStatus,0,sizeof(previousLinkStatus));
+            strcpy((char *)previousLinkStatus, buff);
+            printf("Previous Ethernet status :%s\n", (char *)previousLinkStatus);
+        }
+        sleep(5);
+    }
+    if(buff != NULL)
+        free(buff);
+
+    return 0;
+}
+#endif
+
+#if !defined(_PLATFORM_RASPBERRYPI_)
 /**************************************************************************/
 /*! \fn int GWP_act_DocsisCfgfile(SME_APP_T *app, SME_EVENT_T *event);
  **************************************************************************
@@ -1659,6 +1823,7 @@ static int GWP_act_BefCfgfileEntry_callback()
         return GWP_act_InactiveBefCfgfile();
     }
 }
+#endif
 
 /**************************************************************************/
 /*! \fn int GWP_act_DocsisInited(SME_APP_T *app, SME_EVENT_T *event);
@@ -1671,7 +1836,9 @@ static int GWP_act_DocsisInited_callback()
 {
     esafeErouterOperModeExtIf_e operMode;
     //DOCSIS_Esafe_Db_Enable_e eRouterModeTmp; 
+#if !defined(_PLATFORM_RASPBERRYPI_)
     DOCSIS_Esafe_Db_extIf_e eRouterModeTmp;
+#endif
     char macstr[20];
     Uint8 lladdr[ NETUTILS_IPv6_GLOBAL_ADDR_LEN / sizeof(Uint8) ];
     Uint8 soladdr[ NETUTILS_IPv6_GLOBAL_ADDR_LEN / sizeof(Uint8) ];
@@ -1679,6 +1846,7 @@ static int GWP_act_DocsisInited_callback()
     char soladdrStr[64];
     int sysevent_bridge_mode = 0;
 
+#if !defined(_PLATFORM_RASPBERRYPI_)
     /* Docsis initialized */
     printf("Got DOCSIS Initialized");
 
@@ -1696,7 +1864,7 @@ static int GWP_act_DocsisInited_callback()
 
     
     getDocsisDbFactoryMode(&factory_mode);
-    
+#endif
 
     if (factory_mode) {
         //GWP_SysCfgSetInt("bridge_mode", 2);
@@ -1720,6 +1888,7 @@ static int GWP_act_DocsisInited_callback()
     snprintf(sysevent_cmd, sizeof(sysevent_cmd), "sysevent set bridge_mode %d", sysevent_bridge_mode);
     system(sysevent_cmd);
 
+#if !defined(_PLATFORM_RASPBERRYPI_)
     GWP_DocsisInited();
 
     system("sysevent set docsis-initialized 1");
@@ -1765,7 +1934,8 @@ static int GWP_act_DocsisInited_callback()
     getInterfaceLinkLocalAddress(ER_NETDEVNAME, lladdr);
     
     getMultiCastGroupAddress(lladdr,soladdr);
-  	
+#endif
+
     snprintf(soladdrKey, sizeof(soladdrKey), "ipv6_%s_ll_solicNodeAddr", ER_NETDEVNAME);
     inet_ntop(AF_INET6, soladdr, soladdrStr, sizeof(soladdrStr));
     sysevent_set(sysevent_fd_gs, sysevent_token_gs, soladdrKey, soladdrStr,0);
@@ -1783,12 +1953,12 @@ static int GWP_act_DocsisInited_callback()
     }
 
     //calculate cm base solicited node address
-    
+#if !defined(_PLATFORM_RASPBERRYPI_)
     getInterfaceLinkLocalAddress(IFNAME_WAN_0, lladdr);
     
    
     getMultiCastGroupAddress(lladdr,soladdr);
-  	
+#endif
     snprintf(soladdrKey, sizeof(soladdrKey), "ipv6_%s_ll_solicNodeAddr", IFNAME_WAN_0);
     inet_ntop(AF_INET6, soladdr, soladdrStr, sizeof(soladdrStr));
     sysevent_set(sysevent_fd_gs, sysevent_token_gs, soladdrKey, soladdrStr,0);
@@ -1814,7 +1984,8 @@ static int GWP_act_DocsisInited_callback()
 static int GWP_act_ProvEntry_callback()
 {
     int i;
-    
+
+#if !defined(_PLATFORM_RASPBERRYPI_)
     //system("sysevent set lan-start");
    
 /* TODO: OEM to implement swctl apis */
@@ -1825,7 +1996,49 @@ static int GWP_act_ProvEntry_callback()
     system("/etc/utopia/utopia_init.sh");
 
     syscfg_init();
-    
+#else
+    system("mkdir -p /nvram");
+    system("rm -f /nvram/dnsmasq.leases");
+    system("syslogd -f /etc/syslog.conf");
+
+    //copy files that are needed by CCSP modules
+    system("cp /usr/ccsp/ccsp_msg.cfg /tmp");
+    system("touch /tmp/cp_subsys_ert");
+
+    system("/etc/utopia/utopia_init.sh");
+
+    syscfg_init();
+
+    sleep(2);
+
+    char command[50];
+    char wanPhyName[20];
+    char out_value[20];
+    int outbufsz = sizeof(out_value);
+
+    char previousLinkStatus[10] = "down";
+    if (!syscfg_get(NULL, "wan_physical_ifname", out_value, outbufsz))
+    {
+       strcpy(wanPhyName, out_value);
+       printf("wanPhyName = %s\n", wanPhyName);
+    }
+    else
+    {
+       return -1;
+    }
+
+    system("ifconfig eth0 down");
+    memset(command,0,sizeof(command));
+    sprintf(command, "ip link set eth0 name %s", wanPhyName);
+    printf("****************value of command = %s**********************\n", command);
+    system(command);
+
+    memset(command,0,sizeof(command));
+    sprintf(command, "ifconfig %s up", wanPhyName);
+    printf("************************value of command = %s\***********************n", command);
+    system(command);
+#endif
+
     sysevent_fd = sysevent_open("127.0.0.1", SE_SERVER_WELL_KNOWN_PORT, SE_VERSION, "gw_prov", &sysevent_token);
 
     if (sysevent_fd >= 0)
@@ -1837,6 +2050,7 @@ static int GWP_act_ProvEntry_callback()
     //Make another connection for gets/sets
     sysevent_fd_gs = sysevent_open("127.0.0.1", SE_SERVER_WELL_KNOWN_PORT, SE_VERSION, "gw_prov-gs", &sysevent_token_gs);
 
+#if !defined(_PLATFORM_RASPBERRYPI_)
     /*if (eRouterMode != DOCESAFE_ENABLE_DISABLE_extIf)
     {
         printf("Utopia init done, starting lan\n");
@@ -1848,14 +2062,20 @@ static int GWP_act_ProvEntry_callback()
     /* Now that we have the ICC que (SME) and we are registered on the docsis INIT    */
     /* event, we can notify PCD to continue                                           */
     sendProcessReadySignal();
+#endif
 
     /* Initialize Switch */
     // VEN_SWT_InitSwitch();
-    
+
+#if defined(_PLATFORM_RASPBERRYPI_)
+    printf("Thread to monitor link status \n");
+    pthread_create(&linkstate_tid, NULL, GWP_linkstate_threadfunc, NULL);
+#endif
 
     return 0;
 }
 
+#if !defined(_PLATFORM_RASPBERRYPI_)
 static int GWP_act_DocsisTftpOk_callback(){
     gDocTftpOk = 1;
     if(snmp_inited) {
@@ -1882,6 +2102,7 @@ static int GWP_act_DocsisTftpOk_callback(){
     }
     return;
 }*/
+#endif
 
 static void LAN_start() {
     int i;
@@ -1924,7 +2145,8 @@ static void LAN_start() {
 int main(int argc, char *argv[])
 {
     printf("Started gw_prov_utopia");
-   
+
+#if !defined(_PLATFORM_RASPBERRYPI_)
     if( findProcessId(argv[0]) > 0 )
     {
         printf("Already running");
@@ -1956,7 +2178,13 @@ int main(int argc, char *argv[])
     	
     /* Command line - ignored */
     SME_CreateEventHandler(obj);
-    
+#endif
+
+    GWP_act_ProvEntry_callback();
+    GWP_act_DocsisInited_callback();
+
+    (void) pthread_join(sysevent_tid, NULL);
+    (void) pthread_join(linkstate_tid, NULL);
 
     return 0;
 }
diff --git a/source/include/gw_prov_abstraction.h b/source/include/gw_prov_abstraction.h
index 575a773..8c83419 100644
--- a/source/include/gw_prov_abstraction.h
+++ b/source/include/gw_prov_abstraction.h
@@ -62,6 +62,45 @@
 #define GW_SUBTLV_TR069_CONNREQ_PASSWORD_EXTIF            6
 #define GW_SUBTLV_TR069_ACS_OVERRIDE_EXTIF                7
 
+#if defined(_PLATFORM_RASPBERRYPI_)
+typedef enum
+{
+    False = 0,
+    True = 1
+} Bool;
+
+typedef int                 Int;
+typedef unsigned int        Uns;
+typedef unsigned int        Uint;
+typedef unsigned long       Ulong;
+typedef char                Char;
+typedef char*               String;
+typedef void*               Ptr;
+typedef long long           Int64;
+typedef int                 Int32;
+typedef short               Int16;
+typedef signed char         Int8;
+typedef unsigned long long  Uint64;
+typedef unsigned int        Uint32;
+typedef unsigned short      Uint16;
+typedef unsigned char       Uint8;
+
+typedef enum Status
+{
+    OK = 0,
+    NOK = -1,
+    STATUS_OK = OK,
+    STATUS_NOK = NOK,
+} STATUS;
+
+#define MAC_ADDR_LEN    6
+
+typedef struct mac_addr
+{
+    Uint8 hw[ MAC_ADDR_LEN ];
+} macaddr_t;
+#endif
+
 /*! \var typedef enum DOCSIS_Esafe_Db_extIf_e
     \brief Type of enable.
 *\n           Needs to be in sync with the enum defined for DOCSIS ESAFE DB.
-- 
2.8.3

